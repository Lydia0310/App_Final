/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.yueli.userinterface.hospitalworkarea;


import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.yueli.business.Business;
import org.yueli.business.enterprise.Enterprise;
import org.yueli.business.enterprise.HospitalEnterprise;
import org.yueli.business.inventory.InventoryItem;
import org.yueli.business.network.Network;
import org.yueli.business.useraccount.UserAccount;
import org.yueli.business.workqueue.DeviceRequest;

/**
 *
 * @author Lydia
 */
public class ViewDeviceInventory extends javax.swing.JPanel {

    /**
     * Creates new form ViewDeviceInventory
     */
    private JPanel userProcessContainer;
    private Network network;
    private Business business;
    private UserAccount userAccount;
    public ViewDeviceInventory(JPanel userProcessContainer,Network network,UserAccount userAccount, Business business ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.userAccount = userAccount;
        this.business = business;
        populateInventoryTable();
    }
    
    public void populateInventoryTable(){
        DefaultTableModel model = (DefaultTableModel)deviceInventoryTable.getModel();
        model.setRowCount(0);

        for(Enterprise enterprise : network.getEnterpriseList().getEnterpriseList() ){
            if(enterprise instanceof HospitalEnterprise){
            for(InventoryItem inventoryItem : ((HospitalEnterprise)enterprise).getInventory().getInventoryItemList()){
               if(inventoryItem.getDevice().isIsAssigned()){
                Object row[] = new Object[5];
                row[0] = inventoryItem.getDevice().getDeviceName();
                row[1] = inventoryItem.getDevice().getFunction();
                row[2] = inventoryItem.getDevice().getSupplierID();
                row[3] = inventoryItem.getQuantity();
                row[4] = inventoryItem.getDevice().getLocation();
                model.addRow(row);
               }
            }
        }
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        deviceInventoryTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        requestDispatchingJButton = new javax.swing.JButton();
        quantityJSpinner = new javax.swing.JSpinner();

        deviceInventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Supplier ID", "Function", "Stock Count", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deviceInventoryTable);
        if (deviceInventoryTable.getColumnModel().getColumnCount() > 0) {
            deviceInventoryTable.getColumnModel().getColumn(0).setResizable(false);
            deviceInventoryTable.getColumnModel().getColumn(1).setResizable(false);
            deviceInventoryTable.getColumnModel().getColumn(2).setResizable(false);
            deviceInventoryTable.getColumnModel().getColumn(3).setResizable(false);
            deviceInventoryTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backJButton.setText("<< Back");

        requestDispatchingJButton.setText("Request Dispatching");
        requestDispatchingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDispatchingJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 411, Short.MAX_VALUE)
                .addComponent(quantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(requestDispatchingJButton)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backJButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(requestDispatchingJButton)
                            .addComponent(quantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestDispatchingJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDispatchingJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = deviceInventoryTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row to continue!");
        }
        InventoryItem inventoryItem = (InventoryItem)deviceInventoryTable.getValueAt(selectedRow, 0);
        DeviceRequest deviceRequest = new DeviceRequest();
        deviceRequest.setSender(userAccount);
        deviceRequest.setInventoryItem(inventoryItem);
        int requestQuantity = (Integer)quantityJSpinner.getValue();
        deviceRequest.setRequestQuantity(requestQuantity);
        deviceRequest.setDeviceRequestStatus("Sent");
        deviceRequest.setRequestDate(deviceRequest.getTimestamp());
        
    }//GEN-LAST:event_requestDispatchingJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable deviceInventoryTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner quantityJSpinner;
    private javax.swing.JButton requestDispatchingJButton;
    // End of variables declaration//GEN-END:variables
}

