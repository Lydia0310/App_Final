/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.yueli.userinterface.hospitalworkarea;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.yueli.business.order.MasterOrderDirectory;
import org.yueli.business.order.Order;
import org.yueli.business.order.OrderItem;
import org.yueli.business.role.HospitalAdmin;
import org.yueli.business.useraccount.UserAccount;
import org.yueli.business.workqueue.OrderRequest;
import org.yueli.business.workqueue.WorkRequest;

/**
 *
 * @author Lydia
 */
public class ViewOrder extends javax.swing.JPanel {

    /**
     * Creates new form ViewOrder
     */
    private JPanel userProcessContainer;
    private MasterOrderDirectory masterOrderDirectory;
    private UserAccount userAccount;
    public ViewOrder(JPanel userProcessContainer, MasterOrderDirectory masterOrderDirectory, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.masterOrderDirectory = masterOrderDirectory;
        this.userAccount = userAccount;
        populateOrderOverviewTable();
    }   
    
    public void populateOrderOverviewTable(){
        DefaultTableModel model = (DefaultTableModel)orderJTable.getModel();
        model.setRowCount(0);
        for(Order order : masterOrderDirectory.getMasterOrderList()){
            if(order.getOrderEnterpriseID().equals(((HospitalAdmin)userAccount.getRole()).getHospitalID())){
                Object row[] = new Object[2];
                row[0] = order;
                for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList()){
                    if(order.getOrderID().equals(((OrderRequest)workRequest).getOrder().getOrderID())){
                        row[1] = ((OrderRequest)workRequest).getOrderStatus();
                        
                    }
                }
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderDetailJTable = new javax.swing.JTable();
        viewJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderID", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderJTable);
        if (orderJTable.getColumnModel().getColumnCount() > 0) {
            orderJTable.getColumnModel().getColumn(0).setResizable(false);
            orderJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        orderDetailJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderDetailJTable);
        if (orderDetailJTable.getColumnModel().getColumnCount() > 0) {
            orderDetailJTable.getColumnModel().getColumn(0).setResizable(false);
            orderDetailJTable.getColumnModel().getColumn(1).setResizable(false);
            orderDetailJTable.getColumnModel().getColumn(2).setResizable(false);
            orderDetailJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        viewJButton.setText("View");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewJButton)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(refreshJButton)
                        .addGap(58, 58, 58))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(backJButton)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(refreshJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(viewJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        populateOrderOverviewTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)orderJTable.getModel();
        model.setRowCount(0);
        if(selectedRow <0 ){
            JOptionPane.showMessageDialog(null, "Please select a row to continue!");
        }
        else{
            OrderRequest orderRequest = (OrderRequest)orderJTable.getValueAt(selectedRow, 0);
            for(OrderItem orderItem : orderRequest.getOrder().getOrderItemList()){
                Object row[] = new Object[4];
                row[0] = orderItem.getInventoryItem().getDevice().getDeviceName();
                row[1] = orderItem.getOrderQuantity();
                row[2] = orderItem.getInventoryItem().getDevice().getDevicePrice();
                row[3] = orderItem.getInventoryItem().getDevice().getDevicePrice() * orderItem.getOrderQuantity();
                model.addRow(row);
            }
        }
    }//GEN-LAST:event_viewJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderDetailJTable;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton viewJButton;
    // End of variables declaration//GEN-END:variables
}
